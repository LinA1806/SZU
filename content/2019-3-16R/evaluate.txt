2019.3.16


来源:leetcode 150


题目： 
计算算术表达式的值。
有效运算符为 +,-, *,/。每个操作数可以是一个整数或另一个表达式。
注意：
给定的表达式始终有效。这意味着表达式将始终计算为结果, 并且不会有任何除以零操作。

Example 1:
Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

分析：
设置一个栈保存未使用的数字

对每个字符串第一个字符进行判断，若为符号，则在栈中弹出两个数进行相应的计算，将结果存回栈中
若为数字，则将字符串转化为数值，存入栈中

注意：如果字符串的第一个字符是‘-’，则还需要进一步判断该字符串是负数还是负号

有一个问题，对字符串数组初始化的时候
char* s[] = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
char** str = s;     
这样是可以的

但我不知道为什么下面这句不采用定义中间变量的方法来初始化不可以
    char** str1 = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
    printf("%s \n", *str1);
这时候想打印“10”出来时是不可以的

然后我查了一下
 
        警告是因为，害怕你通过指针来修改字串常量，因为字串常量分配在全局区，而不是在函数的堆栈区，
        程序员可能会存在非法操作，造成内存入侵。只是警告而已。
        消除警告的话：
        #pragma warning(disable : 警告号)
        在头文件中加上这么一句就可以了……
        还有……最好少用 ** 类的指针，或者说最好杜绝这类指针的出现。
